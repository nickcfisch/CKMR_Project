}
lo_truth <- foreach (i=1:nrow(rnd_lo_validation), .packages="sdmTMB") %dopar%{
lo_truth[[i]]<-matrix(NA, nrow=nrow(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]), ncol=1)
lo_truth[[i]][,1] <- ifelse(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]$SPECIES=="BSR",0,1) #0 if BSR, 1 if RER
lo_truth[[i]]
}
saveRDS(pred_fit,"C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_reduced.rds")
saveRDS(lo_truth,"C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_reduced.rds")
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_reduced.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_reduced.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
dim(dat_short)
dat_short<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/dat_short.RDATA")
dim(dat_short)
dat_loo<-dat_short
length(unique(dat_loo$FISHING_EVENT_ID))
not_in<-which(is.na(dat_short$age_factor) | is.na(dat_short$SPECIMEN_LENGTH))
dat_loo<-dat_short[-not_in,]
length(unique(dat_loo$FISHING_EVENT_ID))
dim(dat_loo)
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial1km.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial1km.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooNS_depthquad.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooNS_depthquad.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooNS_depthquadlenage.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooNS_depthquadlenage.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_Depth.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_Depth.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthQuad.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthQuad.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_Gear.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_Gear.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
length(lo_truth)
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_LenAge.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_LenAge.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
length(lo_truth)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthquadGear.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthquadGear.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthquadLenAge.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthquadLenAge.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthquadGearLenAge.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthquadGearLenAge.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthquadLenInd.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthquadLenInd.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
length(lo_truth)
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_Depthquad_AgeCont.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_Depthquad_AgeCont.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
length(lo_truth)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_DepthquadAgeLenInd_notFac.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_DepthquadAgeLenInd_notFac.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
pred_fit<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/pred_fit_LooSpatial5km_month.rds")
lo_truth<-readRDS("C:/Users/fischn/Documents/GitHub/REBS/lo_truth_LooSpatial5km_month.rds")
#If your prediction is above 0.5, RER, if not BSR
pred_class<-pred_CIlo<-pred_CIhigh<-list()
for(i in 1:length(lo_truth)){
if (is.null(nrow(pred_fit[[i]]))){
pred_class[[i]]<-ifelse(mean(pred_fit[[i]])>0.5,1,0)
pred_CIlo[[i]]<-quantile(pred_fit[[i]], probs=0.025)
pred_CIhigh[[i]]<-quantile(pred_fit[[i]], probs=0.975)
} else if(nrow(pred_fit[[i]])>1){
pred_class[[i]]<-ifelse(apply(pred_fit[[i]], 1, FUN=mean)>0.5,1,0)
pred_CIlo[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.025)
pred_CIhigh[[i]]<-apply(pred_fit[[i]], 1, FUN=quantile, probs=0.975)
}
}
#Are the predictions of the testing data accurate?
correct<-ifelse(as.numeric(unlist(lo_truth))==as.numeric(unlist(pred_class)),1,0)
correct_RER<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==1, 1, 0)
correct_BSR<-ifelse(correct==1 & as.numeric(unlist(lo_truth))==0, 1, 0)
incorrect_RER<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==1, 1, 0)
incorrect_BSR<-ifelse(correct==0 & as.numeric(unlist(lo_truth))==0, 1, 0)
LOO_res<-matrix(c(table(correct_BSR)[2],table(incorrect_BSR)[2],table(incorrect_RER)[2],table(correct_RER)[2]),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res, na.rm=TRUE)
Props
length(lo_truth)
dat_orig<-read.csv("C:/Users/fischn/Documents/GitHub/REBS/REBS_dat.csv")
dat_guess<-dat_orig[dat_orig$EXISTENCE_ATTRIBUTE_CODE %in% c(16:17),] #16 is guess for RER, 17 is guess for BSR
dat_guess<-dat_guess[!duplicated(dat_guess$SPECIMEN_ID),]
dim(dat_short)
dat_short$Tech_guess<-NA
for(i in 1:nrow(dat_short)){
if(length(which(dat_guess$SPECIMEN_ID %in% dat_short$SPECIMEN_ID[i]))>0){
dat_short$Tech_guess[i] <- dat_guess[which(dat_guess$SPECIMEN_ID == dat_short$SPECIMEN_ID[i]),"EXISTENCE_ATTRIBUTE_CODE"]
}
}
correct_RER<-sum(dat_short$SPECIES=="RER" & dat_short$Tech_guess==16, na.rm=TRUE)
correct_BSR<-sum(dat_short$SPECIES=="BSR" & dat_short$Tech_guess==17, na.rm=TRUE)
incorrect_RER<-sum(dat_short$SPECIES=="RER" & dat_short$Tech_guess==17, na.rm=TRUE)
incorrect_BSR<-sum(dat_short$SPECIES=="BSR" & dat_short$Tech_guess==16, na.rm=TRUE)
LOO_res<-matrix(c(correct_BSR,incorrect_BSR,incorrect_RER,correct_RER),nrow=2,ncol=2, byrow=TRUE)
rownames(LOO_res)<-c("TRUE BSR", "TRUE RER")
colnames(LOO_res)<-c("Pred BSR", "Pred RER")
Props<-LOO_res/rowSums(LOO_res)
Props
LOO_res
sum(LOO_res)
42*5
#Null ST model, RW
dat_loo<-dat_short
rnd_lo_validation<-matrix(NA, nrow=length(unique(dat_loo$FISHING_EVENT_ID)), ncol=1)
lo_truth<-pred_fit<-list()
rnd_lo_validation[,1]<-unique(dat_loo$FISHING_EVENT_ID)
set.seed(234)
pred_fit <- foreach (i=1:nrow(rnd_lo_validation), .packages="sdmTMB") %dopar%{
mesh <- make_mesh(dat_loo[-which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),], xy_cols = c("X", "Y"), cutoff = 5)
#Refitting glm
sdmtmb_fit <- sdmTMB(
species ~ 1,
data = dat_loo[-which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),],
mesh = mesh,
family = binomial(link = "logit"),
time = "year",
spatiotemporal = "rw",
spatial = "on"
)
pred_fit[[i]]<-matrix(NA, nrow=nrow(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]), ncol=100)
lo_truth[[i]]<-matrix(NA, nrow=nrow(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]), ncol=1)
#sdmTMB doesnt seem to like newdata with 1 row, hence the funky code
if(nrow(pred_fit[[i]])>1){
pred_fit[[i]] <- predict(sdmtmb_fit, newdata=dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),], type="response", nsim = 100)
} else if(nrow(pred_fit[[i]])==1){
pred_fit[[i]] <- predict(sdmtmb_fit, newdata=dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),][c(1,1),], type="response", nsim = 100)[1,]
}
pred_fit[[i]]
}
ibrary(foreach)
dat_loo<-dat_short
rnd_lo_validation<-matrix(NA, nrow=length(unique(dat_loo$FISHING_EVENT_ID)), ncol=1)
lo_truth<-pred_fit<-list()
rnd_lo_validation[,1]<-unique(dat_loo$FISHING_EVENT_ID)
set.seed(234)
pred_fit <- foreach (i=1:nrow(rnd_lo_validation), .packages="sdmTMB") %dopar%{
#Refitting glm
sdmtmb_fit <- sdmTMB(
species ~ ldepth_stand + ldepth_stand2,
data = dat_loo[-which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),],
family = binomial(link = "logit"),
spatial = "off"
)
pred_fit[[i]]<-matrix(NA, nrow=nrow(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]), ncol=1)
lo_truth[[i]]<-matrix(NA, nrow=nrow(dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),]), ncol=1)
#sdmTMB doesnt seem to like newdata with 1 row, hence the funky code
if(nrow(pred_fit[[i]])>1){
pred_fit[[i]] <- predict(sdmtmb_fit, newdata=dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),], type="response")$est
} else if(nrow(pred_fit[[i]])==1){
pred_fit[[i]] <- predict(sdmtmb_fit, newdata=dat_loo[which(dat_loo$FISHING_EVENT_ID %in% rnd_lo_validation[i,1]),][c(1,1),], type="response")$est[1]
}
pred_fit[[i]]
}
