lines(p_S, log(((exp(theta[1])*p_S^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*p_S^exp(theta[3])))/p_S)-1.96*exp(theta[4]), col=4, lwd=2, lty=2)
dep_nll(theta=fit_bhdep$par,S=d6$cultch_volume_kg_m3,R=d6$live_density,p_S)
fit_bhdep
dep_nll(theta=log(c(0.4,280,1.25,0.8)),S=d6$cultch_volume_kg_m3,R=d6$live_density,p_S)
theta<-log(c(0.4,280,1.25,1))
plot(d6$cultch_volume_kg_m3,d6$live_density, pch=19,cex=1, col=clr_dat,type="p",xlab=expression("Cultch volume kg/m"^3),ylab=expression("Live Oyster Density m"^2),bty="l",main="BH with Depensation", ylim=c(0,700), las=1)
#lines(p_S,dep_nll(theta=fit_bhdep$par,S=d6$cultch_volume_kg_m3,R=d6$live_density,p_S)$p_R_bcorr, col=2, lwd=2)
lines(p_S, (exp(theta[1])*p_S^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*p_S^exp(theta[3])), col=4, lwd=2)
#log()
plot(d6$cultch_volume_kg_m3,log(d6$live_density/d6$cultch_volume_kg_m3), pch=19,cex=1, col=clr_dat,type="p",xlab=expression("Cultch volume kg/m"^3),ylab=expression("Live Oyster Density m"^2),bty="l",main="BH with Depensation", ylim=c(), las=1)
lines(p_S, log(((exp(theta[1])*p_S^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*p_S^exp(theta[3])))/p_S), col=4, lwd=2)
lines(p_S, log(((exp(theta[1])*p_S^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*p_S^exp(theta[3])))/p_S)+1.96*exp(theta[4]), col=4, lwd=2, lty=2)
lines(p_S, log(((exp(theta[1])*p_S^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*p_S^exp(theta[3])))/p_S)-1.96*exp(theta[4]), col=4, lwd=2, lty=2)
dat_new<-fit_bhdep<-list()
alp<-bet<-gam<-sig<-NA
theta<-log(c(0.4,280,1.25,1))
set.seed(1)
for(i in 1:1000){
dat_new[[i]]<-rlnorm(n=length(d6$cultch_volume_kg_m3),meanlog=log(((exp(theta[1])*d6$cultch_volume_kg_m3^exp(theta[3]))/(1+exp(theta[1])/exp(theta[2])*d6$cultch_volume_kg_m3^exp(theta[3])))/d6$cultch_volume_kg_m3), sdlog=exp(theta[4]))
theta_start<-log(c(2,300,1,0.7))
fit_bhdep[[i]]<-optim(par=theta_start,function(theta)dep_nll(theta,S=d6$cultch_volume_kg_m3,R=exp(dat_new[[i]])*d6$live_density,p_S)$nll,hessian=TRUE)
alp[i]<-exp(fit_bhdep[[i]]$par[1])
bet[i]<-exp(fit_bhdep[[i]]$par[2])
gam[i]<-exp(fit_bhdep[[i]]$par[3])
sig[i]<-exp(fit_bhdep[[i]]$par[4])
}
hist(gam, breaks=seq(0,200,0.02), xlim=c(0,3))
abline(v=1, col=2)
length(which(gam<1))
600*0.2
install.packages("RTMB")
library(RTMB)
tinytest::test_package("RTMB")
tinytest::test_package("RTMB")
install.packages('RTMB', repos = c('https://kaskr.r-universe.dev', 'https://cloud.r-project.org'))
install.packages("RTMB", repos = c("https://kaskr.r-universe.dev", "https://cloud.r-project.org"))
tinytest::test_package("RTMB")
library(RTMB)
tinytest::test_package("RTMB")
remotes::install_github("https://github.com/kaskr/RTMB", subdir="RTMB")#
library(TMB)
tinytest::test_package("RTMB")
library(RTMB)
tinytest::test_package("RTMB")
install.packages('RTMB', repos = c('https://kaskr.r-universe.dev', 'https://cloud.r-project.org'))
install.packages("RTMB", repos = c("https://kaskr.r-universe.dev", "https://cloud.r-project.org"))
library(RTMB)
tinytest::test_package("RTMB")
dat <- read.table ("linreg.dat", header = TRUE)
dat <- read.table("C:/Users/fischn/Documents/RTMB Workshop/linreg.dat", header = TRUE)
dat <- read.table("C:/Users/fischn/Documents/RTMB Workshop/Example/linreg.dat", header = TRUE)
nll <- function(par){
getAll(dat,par)
pred <- alpha + beta*x
-sum(dnorm(y,pred,exp(logSigma),TRUE))
}
par <- list(alpha=0, beta=0, logSigma=0)
obj <- MakeADFun(nll,par)
opt <- nlminb(obj$par,obj$fn,obj$gr)
sdrep <- sdreport(obj)
summary(sdrep)
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
unif_bound<-0.6
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
OM$OM$Mref
Cod_OM[[1]]$OM$Mref
log(Cod_OM[[1]]$OM$Mref-0.9*Cod_OM[[1]]$OM$Mref)
Cod_OM[[1]]$OM$Mref-0.9*Cod_OM[[1]]$OM$Mref
log(Cod_OM[[1]]$OM$Mref+0.9*Cod_OM[[1]]$OM$Mref)
log(Flatfish_OM[[1]]$OM$Mref+0.9*Flatfish_OM[[1]]$OM$Mref)
log(Flatfish_OM[[1]]$OM$Mref-0.9*Flatfish_OM[[1]]$OM$Mref)
log(Sardine_OM[[1]]$OM$Mref-0.9*Sardine_OM[[1]]$OM$Mref)
log(Sardine_OM[[1]]$OM$R0-0.9*Sardine_OM[[1]]$OM$R0)
log(Sardine_OM[[1]]$OM$R0+0.9*Sardine_OM[[1]]$OM$R0)
log(Flatfish_OM[[1]]$OM$R0-0.9*Flatfish_OM[[1]]$OM$R0)
log(Flatfish_OM[[1]]$OM$R0=0.9*Flatfish_OM[[1]]$OM$R0)
log(Flatfish_OM[[1]]$OM$R0+0.9*Flatfish_OM[[1]]$OM$R0)
log(Cod_OM[[1]]$OM$R0+0.9*Cod_OM[[1]]$OM$R0)
log(Cod_OM[[1]]$OM$R0-0.9*Cod_OM[[1]]$OM$R0)
unif_bound<-0.65
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-1:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=0)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*unif_bound,max=OM$OM$Mref+OM$OM$Mref*unif_bound)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*unif_bound,max=OM$q_index+OM$q_index*unif_bound)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*unif_bound,max=OM$OM$R0+OM$OM$R0*unif_bound)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*unif_bound,max=OM$OM$Sel_slope+OM$OM$Sel_slope*unif_bound)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*unif_bound,max=OM$OM$Sel_50+OM$OM$Sel_50*unif_bound)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*unif_bound,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*unif_bound)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_q=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
Cod_OM[[1]]$OM$sd_rec
unif_bound<-0.65
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-1:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=0)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*unif_bound,max=OM$OM$Mref+OM$OM$Mref*unif_bound)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*unif_bound,max=OM$q_index+OM$q_index*unif_bound)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*unif_bound,max=OM$OM$R0+OM$OM$R0*unif_bound)),
log_sigma_rec=log(runif(1,min=OM$OM$sd_rec-OM$OM$sd_rec*unif_bound,max=OM$OM$sd_rec+OM$OM$sd_rec*unif_bound)),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*unif_bound,max=OM$OM$Sel_slope+OM$OM$Sel_slope*unif_bound)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*unif_bound,max=OM$OM$Sel_50+OM$OM$Sel_50*unif_bound)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*unif_bound,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*unif_bound)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_q=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
devtools::install_github("kaskr/TMB_contrib_R/TMBhelper")
devtools::install_github("kaskr/TMB_contrib_R/TMBhelper", force=TRUE)
library(TMBhelper)
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
unif_bound<-0.65
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-1:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=0)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*unif_bound,max=OM$OM$Mref+OM$OM$Mref*unif_bound)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*unif_bound,max=OM$q_index+OM$q_index*unif_bound)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*unif_bound,max=OM$OM$R0+OM$OM$R0*unif_bound)),
log_sigma_rec=log(runif(1,min=OM$OM$sd_rec-OM$OM$sd_rec*unif_bound,max=OM$OM$sd_rec+OM$OM$sd_rec*unif_bound)),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*unif_bound,max=OM$OM$Sel_slope+OM$OM$Sel_slope*unif_bound)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*unif_bound,max=OM$OM$Sel_50+OM$OM$Sel_50*unif_bound)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*unif_bound,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*unif_bound)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_q=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-1:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-10:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom20_1.RData"))
Cod_OM<-Cod_wdat
Flatfish_OM<-Flatfish_wdat
Sardine_OM<-Sardine_wdat
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("SCAA_Fisch_wAge0.cpp")
#Doing N Simulations
N_sim<-10:100
res_list<-list()
for (Q in 1:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_OM[[s]]
} else if (Q==2){
OM<-Flatfish_OM[[s]]
}else if (Q==3){
OM<-Sardine_OM[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
Lamda_Harvest=1,                           #Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Comp=1,
Lamda_Index=1)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
################
#TMB stuff
################
dyn.load(dynlib("SCAA_Fisch_wAge0"))
parm_names<-names(MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="SCAA_Fisch_wAge0", map=fixed, random=reffects)
SCAA_fit <- nlminb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE,bias.correct=TRUE,getHessian=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
