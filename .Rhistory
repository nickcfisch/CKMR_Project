Sardine_runs[[s]]<-SimPop(seed=s,fage=0,lage=15,fyear=1,lyear=100,
Linf=25,
a3=0.5,
L1=10,
BK=0.4,
Weight_scaling=1.7e-5,
Weight_allometry=2.9,
Mref=0.4,
Mat_50=15.9,
Mat_slope=-0.9,
Sel_50=15.9,
Sel_slope=3.3,
R0=exp(16),
h=0.59,
sd_rec=0.73,
const_F=FALSE,
fint=0.25,
fhigh=0.7875,
flow=0.2037,
stochastic=TRUE)
}
#For Flatfish, fmsy is 0.27, MSY is 5240.563 (*0.85= 4454.479), and fhigh which reaches 0.85*MSY is 0.5425, flow is 0.1259
#2.4 is approx age at 50% maturity, making 6.916656 the generation time, as gen time = k+(1/(exp(M)-1))
Flatfish_runs<-list()
for (s in 1:Nsim){
Flatfish_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=25,
fyear=1,
lyear=100,
Linf=47.4,
a3=0.5,
L1=12.7,
BK=0.35,
Weight_scaling=1e-5,
Weight_allometry=3,
Mref=0.2,
Mat_50=28.9,
Mat_slope=-0.42,
Sel_50=28.9,
Sel_slope=7,
R0=exp(10.5),
h=0.76,
sd_rec=0.7,
const_F=FALSE,
fint=0.25,
fhigh=0.5425,
flow=0.1259,
stochastic=TRUE)
}
Cod_runs<-list()
for (s in 1:Nsim){
Cod_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=25,
fyear=1,
lyear=100,
Linf=132,
a3=0.5,
L1=20,
BK=0.2,
Weight_scaling=6.8e-6,
Weight_allometry=3.1,
Mref=0.2,
Mat_50=38.2,
Mat_slope=-0.27,
Sel_50=38.2,
Sel_slope=10.6,
R0=exp(18.7),
h=0.65,
sd_rec=0.4,
const_F=FALSE,
fint=0.25,
fhigh=0.20284,
flow=0.06232,
stochastic=TRUE)
}
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
length(c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30)))
#Ncomp 100 all years, sdindex 0.5
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
N_comp_preCKMR<-c(rep(100,75))
N_comp_CKMR<-100
sd_catch<-0.05
sd_index<-0.5
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-96
lyear_ckmr<-100
pi_nu<-0.736
progress_bar<-TRUE
for (s in 1:N_sim){
Cod_wdat[[s]]     <-Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])
Flatfish_wdat[[s]]<-Get_Data(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])
Sardine_wdat[[s]] <-Get_Data(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])
if(progress_bar==TRUE){
plot(rep(1,length(1:s)), pch=16)
}
}
wd
save(Cod_wdat, file=paste0(wd,"/Cod_wdat_N100allyrs_Ind50_ckmrmultinom5_1.RData"))
save(Flatfish_wdat, file=paste0(wd,"/Flatfish_wdat_N100allyrs_Ind50_ckmrmultinom5_1.RData"))
save(Sardine_wdat, file=paste0(wd,"/Sardine_wdat_N100allyrs_Ind50_ckmrmultinom5_1.RData"))
#Ncomp 1000 all years, sdindex 0.5
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
N_comp_preCKMR<-c(rep(1000,75))
N_comp_CKMR<-1000
sd_catch<-0.05
sd_index<-0.5
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-96
lyear_ckmr<-100
pi_nu<-0.736
progress_bar<-TRUE
for (s in 1:N_sim){
Cod_wdat[[s]]     <-Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])
Flatfish_wdat[[s]]<-Get_Data(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])
Sardine_wdat[[s]] <-Get_Data(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])
if(progress_bar==TRUE){
plot(rep(1,length(1:s)), pch=16)
}
}
#Ncomp 1000 all years, sdindex 0.5
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
N_comp_preCKMR<-c(rep(1000,75))
N_comp_CKMR<-1000
sd_catch<-0.05
sd_index<-0.5
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-99
lyear_ckmr<-100
pi_nu<-0.736
progress_bar<-TRUE
for (s in 1:N_sim){
Cod_wdat[[s]]     <-Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])
Flatfish_wdat[[s]]<-Get_Data(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])
Sardine_wdat[[s]] <-Get_Data(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])
if(progress_bar==TRUE){
plot(rep(1,length(1:s)), pch=16)
}
}
save(Cod_wdat, file=paste0(wd,"/Cod_wdat_N1000allyrs_Ind50_ckmrmultinom1_1.RData"))
save(Flatfish_wdat, file=paste0(wd,"/Flatfish_wdat_N1000allyrs_Ind50_ckmrmultinom1_1.RData"))
save(Sardine_wdat, file=paste0(wd,"/Sardine_wdat_N1000allyrs_Ind50_ckmrmultinom1_1.RData"))
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
#Ncomp 100, sdindex 0.50, ckmr 5yrs
load(paste0(wd,"/Cod_wdat_N100_Ind50_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind50_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind50_ckmrmultinom5_1.RData"))
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
library(TMB)
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cl <- 2
registerDoParallel(cl)
N_sim<-1:2
res_list_Cod<-res_list_Flatfish<-res_list_Sardine<-list()
res_list_Cod  <- foreach (s=1:N_sim) %dopar%{
OM<-Cod_wdat[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
counter<-1
tryCatch({
SCAA_fit <- fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE, bias.correct=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
SCAA_fit
}
res_list_Cod  <- foreach (s=1:N_sim, .packages=c("TMB")) %dopar%{
OM<-Cod_wdat[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
counter<-1
tryCatch({
SCAA_fit <- fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE, bias.correct=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
SCAA_fit
}
N_sim<-2
res_list_Cod<-res_list_Flatfish<-res_list_Sardine<-list()
res_list_Cod  <- foreach (s=1:N_sim, .packages=c("TMB")) %dopar%{
OM<-Cod_wdat[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
counter<-1
tryCatch({
SCAA_fit <- fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE, bias.correct=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
SCAA_fit
}
N_sim<-2
res_list_Cod<-res_list_Flatfish<-res_list_Sardine<-list()
res_list_Cod  <- foreach (s=1:N_sim, .packages=c("TMB")) %dopar%{
OM<-Cod_wdat[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
counter<-1
tryCatch({
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE, bias.correct=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
SCAA_fit
}
cl <- 2
registerDoParallel(cl)
N_sim<-2
res_list_Cod<-res_list_Flatfish<-res_list_Sardine<-list()
res_list_Sardine  <- foreach (s=1:N_sim, .packages=c("TMB")) %dopar%{
OM<-Sardine_wdat[[s]]
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
counter<-1
tryCatch({
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE, bias.correct=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
SCAA_fit
}
s
