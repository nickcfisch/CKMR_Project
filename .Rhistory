((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > OM$lage){
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
#######Instead if the sample year of older is equal to the birth year of the potential parent
if(collapsed_pairs$samp_year.old[i]==(collapsed_pairs$true_born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive
if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > 0 & ((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) < (OM$lage+1)){ #if we're not in plus group, and age of grandparent at year of parents birth must be positive
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa))) )
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa))) )
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa))) )
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > OM$lage){
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa))) )
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa))) )
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- 0.5*( collapsed_pairs$prob_GGP[i] +
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa))) )
}
}
}
}
}
}
#Multiplying by two for the probability of MGGP or PGGP
collapsed_pairs$prob_GGP<-2*collapsed_pairs$prob_GGP
collapsed_pairs$n_UP<-collapsed_pairs$n_HSPorGGP<-collapsed_pairs$n_POP<-NA
for (m in 1:nrow(collapsed_pairs)){
collapsed_pairs[m,c("n_UP","n_HSPorGGP","n_POP")]<-t(rmultinom(1, size=collapsed_pairs$times[m], prob=c(1-((collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu+collapsed_pairs$prob_POP[m]),(collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu,collapsed_pairs$prob_POP[m])))
}
#ordering the counts by coded year born and then the coded age difference (for data purposes)
collapsed_pairs<-collapsed_pairs[order(collapsed_pairs$coded_born_year.young,collapsed_pairs$coded_age_diff,collapsed_pairs$true_born_year.young,collapsed_pairs$true_age_diff),]
collapsed_data<-aggregate.data.frame(x=collapsed_pairs[,c("times", "n_UP", "n_HSPorGGP","n_POP")], by=list(collapsed_pairs$coded_born_year.young,collapsed_pairs$coded_age_diff,collapsed_pairs$samp_year.old,collapsed_pairs$coded_age.young,collapsed_pairs$coded_age.old), FUN=sum)
colnames(collapsed_data)<-c("coded_born_year.young", "coded_age_diff","samp_year.old","coded_age.young","coded_age.old","times", "n_UP", "n_HSPorGGP","n_POP")
sim_vals <- list(samples = samples, pairs=pairs, pair_counts = collapsed_pairs, pair_data = collapsed_data[,c("coded_born_year.young", "coded_age_diff", "samp_year.old","coded_age.young","coded_age.old","n_UP", "n_HSPorGGP","n_POP","times")])
return(list(OM=OM,dat_seed=dat_seed,sd_catch=sd_catch,N_Comp_preCKMR=N_Comp_preCKMR,N_Comp_CKMR=N_Comp_CKMR,q_index=q_index,sd_index=sd_index,fyear_dat=fyear_dat,lyear_dat=lyear_dat,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AE_mat,
#            pair_counts=sim_vals$pair_counts, #too memory intensive to upload (and don't use for anything)
Obs_Catch=Obs_Catch,
Obs_Catch_Comp=Obs_Catch_Comp,
Obs_Index_25=Obs_Index_25,
Obs_Index_50=Obs_Index_50,
#CKMR HSP data
born_year_old=sim_vals$pair_data$coded_born_year.young-sim_vals$pair_data$coded_age_diff,
age_diff=sim_vals$pair_data$coded_age_diff,
n_ckmr=sim_vals$pair_data$times,
k_ckmr_hsporggp=sim_vals$pair_data$n_HSPorGGP,
#CKMR POP
born_year_young=sim_vals$pair_data$coded_born_year.young,
k_ckmr_pop=sim_vals$pair_data$n_POP,
samp_year_old=sim_vals$pair_data$samp_year.old,
coded_age_young=sim_vals$pair_data$coded_age.young,
coded_age_old=sim_vals$pair_data$coded_age.old  ))
}
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- 10
registerDoParallel(cl)
#Ncomp 5000, sdindex 0.25
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
N_comp_preCKMR<-c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30))
N_comp_CKMR<-5000
sd_catch<-0.05
sd_index<-0.25
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-81
lyear_ckmr<-100
pi_nu<-0.736
Cod_wdat      <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])}
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
#Ncomp 5000, sdindex 0.25
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
N_comp_preCKMR<-c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30))
N_comp_CKMR<-5000
sd_catch<-0.05
sd_index<-0.25
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-81
lyear_ckmr<-100
pi_nu<-0.736
Cod_wdat      <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])}
s
Cod_wdat[[1]]
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
N_sim<-1:1
res_list<-list()
for (Q in 3:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_wdat[[s]]
} else if (Q==2){
OM<-Flatfish_wdat[[s]]
}else if (Q==3){
OM<-Sardine_wdat[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs","log_recruit_devs_init")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps=1, getsd=TRUE,bias.correct=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
windows()
SparseM::image(SCAA$env$spHess(random=TRUE))
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
N_sim<-1:1
res_list<-list()
for (Q in 3:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_wdat[[s]]
} else if (Q==2){
OM<-Flatfish_wdat[[s]]
}else if (Q==3){
OM<-Sardine_wdat[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
l<-lower_bounds[-which(parm_names %in% c(names(fixed)))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed)))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps=1, getsd=TRUE,bias.correct=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
load(paste0(wd,"/Cod_wdat_N5000_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N5000_Ind25_ckmrmultinom20_1.RData"))
load(paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom20_1.RData"))
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
N_sim<-1:1
res_list<-list()
for (Q in 3:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_wdat[[s]]
} else if (Q==2){
OM<-Flatfish_wdat[[s]]
}else if (Q==3){
OM<-Sardine_wdat[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE")$par)
fixed<-list(steepness=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
l<-lower_bounds[-which(parm_names %in% c(names(fixed)))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed)))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps=1, getsd=TRUE,bias.correct=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
load(paste0(wd,"/Cod_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Flatfish_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
load(paste0(wd,"/Sardine_wdat_N100_Ind25_ckmrmultinom5_1.RData"))
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
N_sim<-1:1
res_list<-list()
for (Q in 3:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_wdat[[s]]
} else if (Q==2){
OM<-Flatfish_wdat[[s]]
}else if (Q==3){
OM<-Sardine_wdat[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE")$par)
fixed<-list(steepness=factor(NA),log_recruit_devs_init=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps=1, getsd=TRUE,bias.correct=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
#TMB Section
library(TMB)
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
N_sim<-1:1
res_list<-list()
for (Q in 3:3){  #Running through the life history types
res_list[[Q]]<-list()
for (s in N_sim){
if(Q==1){
OM<-Cod_wdat[[s]]
} else if (Q==2){
OM<-Flatfish_wdat[[s]]
}else if (Q==3){
OM<-Sardine_wdat[[s]]
}
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-names(MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE")$par)
fixed<-list(steepness=factor(NA),log_recruit_devs_init=rep(factor(NA),dat$lage),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed),reffects))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed),reffects))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed, random=reffects)
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps=1, getsd=TRUE,bias.correct=TRUE)
res_list[[Q]][[s]]<-SCAA_fit
print(c(Q,s))
}
}
