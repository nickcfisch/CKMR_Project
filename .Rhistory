if(collapsed_pairs$samp_year.old[i]>(collapsed_pairs$true_born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive
if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > 0 & ((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) < (OM$lage+1)){ #if we're not in plus group, and age of grandparent at year of parents birth must be positive
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > OM$lage){
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
#######Instead if the sample year of older is equal to the birth year of the potential parent
if(collapsed_pairs$samp_year.old[i]==(collapsed_pairs$true_born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive
if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > 0 & ((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) < (OM$lage+1)){ #if we're not in plus group, and age of grandparent at year of parents birth must be positive
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1]*OM$Waa[(collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(((collapsed_pairs$true_born_year.young[i]-k)-(collapsed_pairs$true_born_year.young[i]-collapsed_pairs$true_age_diff[i])) > OM$lage){
if((collapsed_pairs$true_born_year.young[i]-k)>0 & collapsed_pairs$true_born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[collapsed_pairs$true_born_year.young[i]-k,]*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]>0){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[collapsed_pairs$true_born_year.young[i],k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$true_born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if((collapsed_pairs$true_born_year.young[i]-k)<1 & collapsed_pairs$true_born_year.young[i]<1){  #if in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
}
}
}
#Multiplying by two for the probability of MGGP or PGGP
collapsed_pairs$prob_GGP<-2*collapsed_pairs$prob_GGP
collapsed_pairs$n_UP<-collapsed_pairs$n_HSPorGGP<-collapsed_pairs$n_POP<-NA
for (m in 1:nrow(collapsed_pairs)){
collapsed_pairs[m,c("n_UP","n_HSPorGGP","n_POP")]<-t(rmultinom(1, size=collapsed_pairs$times[m], prob=c(1-((collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu+collapsed_pairs$prob_POP[m]),(collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu,collapsed_pairs$prob_POP[m])))
}
#ordering the counts by coded year born and then the coded age difference (for data purposes)
collapsed_pairs<-collapsed_pairs[order(collapsed_pairs$coded_born_year.young,collapsed_pairs$coded_age_diff,collapsed_pairs$true_born_year.young,collapsed_pairs$true_age_diff),]
collapsed_data<-aggregate.data.frame(x=collapsed_pairs[,c("times", "n_UP", "n_HSPorGGP","n_POP")], by=list(collapsed_pairs$coded_born_year.young,collapsed_pairs$coded_age_diff,collapsed_pairs$samp_year.old,collapsed_pairs$coded_age.young,collapsed_pairs$coded_age.old), FUN=sum)
colnames(collapsed_data)<-c("coded_born_year.young", "coded_age_diff","samp_year.old","coded_age.young","coded_age.old","times", "n_UP", "n_HSPorGGP","n_POP")
sim_vals <- list(samples = samples, pairs=pairs, pair_counts = collapsed_pairs, pair_data = collapsed_data[,c("coded_born_year.young", "coded_age_diff", "samp_year.old","coded_age.young","coded_age.old","n_UP", "n_HSPorGGP","n_POP","times")])
return(list(OM=OM,dat_seed=dat_seed,sd_catch=sd_catch,N_Comp_preCKMR=N_Comp_preCKMR,N_Comp_CKMR=N_Comp_CKMR,q_index=q_index,sd_index=sd_index,fyear_dat=fyear_dat,lyear_dat=lyear_dat,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AE_mat,
#            pair_counts=sim_vals$pair_counts, #too memory intensive to upload (and don't use for anything)
Obs_Catch=Obs_Catch,
Obs_Catch_Comp=Obs_Catch_Comp,
Obs_Index=Obs_Index,
#CKMR HSP data
born_year_old=sim_vals$pair_data$coded_born_year.young-sim_vals$pair_data$coded_age_diff,
age_diff=sim_vals$pair_data$coded_age_diff,
n_ckmr=sim_vals$pair_data$times,
k_ckmr_hsporggp=sim_vals$pair_data$n_HSPorGGP,
#CKMR POP
born_year_young=sim_vals$pair_data$coded_born_year.young,
k_ckmr_pop=sim_vals$pair_data$n_POP,
samp_year_old=sim_vals$pair_data$samp_year.old,
coded_age_young=sim_vals$pair_data$coded_age.young,
coded_age_old=sim_vals$pair_data$coded_age.old  ))
}
Nsim<-100
Sardine_runs<-list()
for (s in 1:Nsim){
Sardine_runs[[s]]<-SimPop(seed=s,fage=0,lage=15,fyear=1,lyear=100,
Linf=25,
a3=0.5,
L1=10,
BK=0.4,
Weight_scaling=1.7e-5,
Weight_allometry=2.9,
Mref=0.4,
Mat_50=15.9,
Mat_slope=-0.9,
Sel_50=15.9,
Sel_slope=3.3,
R0=exp(16),
h=0.59,
sd_rec=0.73,
const_F=FALSE,
fint=0.25,
fhigh=0.7875,
flow=0.2037,
stochastic=TRUE)
}
#For Flatfish, fmsy is 0.27, MSY is 5240.563 (*0.85= 4454.479), and fhigh which reaches 0.85*MSY is 0.5425, flow is 0.1259
#2.4 is approx age at 50% maturity, making 6.916656 the generation time, as gen time = k+(1/(exp(M)-1))
Flatfish_runs<-list()
for (s in 1:Nsim){
Flatfish_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=25,
fyear=1,
lyear=100,
Linf=47.4,
a3=0.5,
L1=12.7,
BK=0.35,
Weight_scaling=1e-5,
Weight_allometry=3,
Mref=0.2,
Mat_50=28.9,
Mat_slope=-0.42,
Sel_50=28.9,
Sel_slope=7,
R0=exp(10.5),
h=0.76,
sd_rec=0.7,
const_F=FALSE,
fint=0.25,
fhigh=0.5425,
flow=0.1259,
stochastic=TRUE)
}
#For Cod, fmsy is 0.12, MSY is 160865265 (*0.85=136735475), f that reaches 0.85*MSY is 0.20284, flow is 0.06232
#Age at 50% maturity is 1.5, making generation time 6.02, as gen time = k+(1/(exp(M)-1))
#sum((Cod_runs[[1]]$lxo*Cod_runs[[1]]$Mat*Cod_runs[[1]]$Waa)/sum(Cod_runs[[1]]$lxo*Cod_runs[[1]]$Mat*Cod_runs[[1]]$Waa)*0:25)
#same as weighted.mean(0:25,w=(Cod_runs[[1]]$lxo*Cod_runs[[1]]$Mat*Cod_runs[[1]]$Waa)/sum(Cod_runs[[1]]$lxo*Cod_runs[[1]]$Mat*Cod_runs[[1]]$Waa))
Cod_runs<-list()
for (s in 1:Nsim){
Cod_runs[[s]]<-SimPop(seed=s,
fage=0,
lage=25,
fyear=1,
lyear=100,
Linf=132,
a3=0.5,
L1=20,
BK=0.2,
Weight_scaling=6.8e-6,
Weight_allometry=3.1,
Mref=0.2,
Mat_50=38.2,
Mat_slope=-0.27,
Sel_50=38.2,
Sel_slope=10.6,
R0=exp(18.7),
h=0.65,
sd_rec=0.4,
const_F=FALSE,
fint=0.25,
fhigh=0.20284,
flow=0.06232,
stochastic=TRUE)
}
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- 15
registerDoParallel(cl)
N_comp_preCKMR<-c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30))
length(N_comp_preCKMR)
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- 15
registerDoParallel(cl)
#Ncomp 5000, sdindex 0.25
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
#N_comp_preCKMR<-c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30))
N_comp_preCKMR<-rep(1000,75)
N_comp_CKMR<-5000
sd_catch<-0.05
sd_index<-0.25
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-96
lyear_ckmr<-100
pi_nu<-0.736
Cod_wdat      <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])}
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- 15
registerDoParallel(cl)
#Ncomp 5000, sdindex 0.25
N_sim<-100
Cod_wdat<-Flatfish_wdat<-Sardine_wdat<-list()
#N_comp_preCKMR<-100
#N_comp_preCKMR<-c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30))
N_comp_preCKMR<-rep(1000,75)
N_comp_CKMR<-5000
sd_catch<-0.05
sd_index<-0.25
fyear_dat<-26
lyear_dat<-100
prop_ckmr<-1
fyear_ckmr<-96
lyear_ckmr<-100
pi_nu<-0.736
Cod_wdat      <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])}
Flatfish_wdat <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])}
Sardine_wdat  <- foreach (s=1:N_sim) %dopar%{Get_Data(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,sd_index=sd_index,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])}
save(Cod_wdat, file=paste0(wd,"/Cod_wdat_N5000_Ind25_ckmrmultinom5_1000allyears_1.RData"))
save(Flatfish_wdat, file=paste0(wd,"/Flatfish_wdat_N5000_Ind25_ckmrmultinom5_1000allyears_1.RData"))
save(Sardine_wdat, file=paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom5_1000allyears_1.RData"))
windows()
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
res_list<-list()
res_list[[3]]<-readRDS("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_NoIndex_ckmrmultinom5.RData")
res_list<-list()
res_list[[3]]<-readRDS("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_NoIndex_ckmrmultinom5.RData")
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
res_list<-list()
res_list[[3]]<-readRDS("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_NoIndex_ckmrmultinom5.RData")
load(paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom5_1.RData"))
re_Dep<-re_SSB<-array(NA, dim=c(3,100,76))
re_harv<-array(NA, dim=c(3,100,75))
re_R0<-re_M<-matrix(NA, nrow=100, ncol=3)
for(f in 3:3){
for (i in 1:100){
if(f==1){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Cod_wdat[[i]]$OM$SSB[26:101])/Cod_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Cod_wdat[[i]]$OM$R0)/Cod_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Cod_wdat[[i]]$OM$Mref)/Cod_wdat[[i]]$OM$Mref
}
}else if (f==2){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Flatfish_wdat[[i]]$OM$SSB[26:101])/Flatfish_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Flatfish_wdat[[i]]$OM$R0)/Flatfish_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Flatfish_wdat[[i]]$OM$Mref)/Flatfish_wdat[[i]]$OM$Mref
}
} else if (f==3){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Sardine_wdat[[i]]$OM$SSB[26:101])/Sardine_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Sardine_wdat[[i]]$OM$R0)/Sardine_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Sardine_wdat[[i]]$OM$Mref)/Sardine_wdat[[i]]$OM$Mref
#        re_harv[f,i,]<-(x[i,]-Sardine_wdat[[i]]$Obs_Catch)/Sardine_wdat[[i]]$Obs_Catch
}
}
}
}
#SSB
par(mfrow=c(3,3))
boxplot(re_SSB[1,,], ylim=c(-0.25,0.25), las=1, main="Cod", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[2,,], ylim=c(-0.25,0.25), las=1, main="Flatfish", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[3,,], ylim=c(-0.25,0.25), las=1, main="Sardine", ylab="RE - SSB")
abline(h=0)
#R0
boxplot(re_R0[,1], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,2], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,3], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
#M
boxplot(re_M[,1], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,2], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,3], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
res_list<-list()
res_list[[3]]<-readRDS("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_Ind25_ckmrmultinom5_analyticalq.RData")
load(paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom5_1.RData"))
re_Dep<-re_SSB<-array(NA, dim=c(3,100,76))
re_harv<-array(NA, dim=c(3,100,75))
re_R0<-re_M<-matrix(NA, nrow=100, ncol=3)
for(f in 3:3){
for (i in 1:100){
if(f==1){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Cod_wdat[[i]]$OM$SSB[26:101])/Cod_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Cod_wdat[[i]]$OM$R0)/Cod_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Cod_wdat[[i]]$OM$Mref)/Cod_wdat[[i]]$OM$Mref
}
}else if (f==2){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Flatfish_wdat[[i]]$OM$SSB[26:101])/Flatfish_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Flatfish_wdat[[i]]$OM$R0)/Flatfish_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Flatfish_wdat[[i]]$OM$Mref)/Flatfish_wdat[[i]]$OM$Mref
}
} else if (f==3){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Sardine_wdat[[i]]$OM$SSB[26:101])/Sardine_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Sardine_wdat[[i]]$OM$R0)/Sardine_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Sardine_wdat[[i]]$OM$Mref)/Sardine_wdat[[i]]$OM$Mref
#        re_harv[f,i,]<-(x[i,]-Sardine_wdat[[i]]$Obs_Catch)/Sardine_wdat[[i]]$Obs_Catch
}
}
}
}
#SSB
par(mfrow=c(3,3))
boxplot(re_SSB[1,,], ylim=c(-0.25,0.25), las=1, main="Cod", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[2,,], ylim=c(-0.25,0.25), las=1, main="Flatfish", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[3,,], ylim=c(-0.25,0.25), las=1, main="Sardine", ylab="RE - SSB")
abline(h=0)
#R0
boxplot(re_R0[,1], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,2], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,3], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
#M
boxplot(re_M[,1], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,2], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,3], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
res_list<-list()
res_list[[3]]<-readRDS("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_Ind25_ckmrmultinom5.RData")
load(paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom5_1.RData"))
re_Dep<-re_SSB<-array(NA, dim=c(3,100,76))
re_harv<-array(NA, dim=c(3,100,75))
re_R0<-re_M<-matrix(NA, nrow=100, ncol=3)
for(f in 3:3){
for (i in 1:100){
if(f==1){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Cod_wdat[[i]]$OM$SSB[26:101])/Cod_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Cod_wdat[[i]]$OM$R0)/Cod_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Cod_wdat[[i]]$OM$Mref)/Cod_wdat[[i]]$OM$Mref
}
}else if (f==2){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Flatfish_wdat[[i]]$OM$SSB[26:101])/Flatfish_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Flatfish_wdat[[i]]$OM$R0)/Flatfish_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Flatfish_wdat[[i]]$OM$Mref)/Flatfish_wdat[[i]]$OM$Mref
}
} else if (f==3){
if(length(res_list[[f]][[i]])>2){
re_SSB[f,i,]<-(res_list[[f]][[i]]$SD$value-Sardine_wdat[[i]]$OM$SSB[26:101])/Sardine_wdat[[i]]$OM$SSB[26:101]
re_R0[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_R0"])-Sardine_wdat[[i]]$OM$R0)/Sardine_wdat[[i]]$OM$R0
re_M[i,f]<-(exp(res_list[[f]][[i]]$SD$par.fixed["log_M"])-Sardine_wdat[[i]]$OM$Mref)/Sardine_wdat[[i]]$OM$Mref
#        re_harv[f,i,]<-(x[i,]-Sardine_wdat[[i]]$Obs_Catch)/Sardine_wdat[[i]]$Obs_Catch
}
}
}
}
#SSB
par(mfrow=c(3,3))
boxplot(re_SSB[1,,], ylim=c(-0.25,0.25), las=1, main="Cod", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[2,,], ylim=c(-0.25,0.25), las=1, main="Flatfish", ylab="RE - SSB")
abline(h=0)
boxplot(re_SSB[3,,], ylim=c(-0.25,0.25), las=1, main="Sardine", ylab="RE - SSB")
abline(h=0)
#R0
boxplot(re_R0[,1], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,2], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
boxplot(re_R0[,3], ylim=c(-0.25,0.25), las=1, main="", ylab="RE - R0")
abline(h=0)
#M
boxplot(re_M[,1], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,2], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
boxplot(re_M[,3], ylim=c(-0.1,0.1), las=1, main="", ylab="RE - M")
abline(h=0)
wd<-"C:/Users/fischn/Documents/GitHub/CKMR_Project/"
AEs<-readRDS("C:/Users/fischn/Documents/GitHub/CKMR_Project/AE_mat_list.RData")
library(TMB)
#TMB Section
setwd(wd)
#Compile and load model
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
library(foreach)
library(doParallel)
#setup parallel backend to use many processors
cl <- 15
registerDoParallel(cl)
N_sim<-100
run<-function(s=1,OM=NA){
dat<-list(fyear=OM$OM$fyear, lyear=75, fage=OM$OM$fage, lage=OM$OM$lage,
years=OM$OM$fyear:75, ages=OM$OM$fage:OM$OM$lage,
obs_harv=OM$Obs_Catch,
obs_harv=rowSums(t(t(OM$OM$Caa[26:100])*OM$OM$Waa)),
obs_index=OM$Obs_Index,
obs_fishery_comp=OM$Obs_Catch_Comp/rowSums(OM$Obs_Catch_Comp),
SS_fishery=rowSums(OM$Obs_Catch_Comp),
Mat=OM$OM$Mat,
Laa=OM$OM$Laa,
Waa=OM$OM$Waa,
#CKMR
coded_born_year_old=OM$born_year_old-(OM$fyear_dat-1),
coded_age_diff=OM$age_diff,
n_ckmr=OM$n_ckmr,
k_ckmr_hsporggp=OM$k_ckmr_hsporggp,
coded_born_year_young=OM$born_year_young-(OM$fyear_dat-1),
k_ckmr_pop=OM$k_ckmr_pop,
samp_year_coded_old=OM$samp_year_old-(OM$fyear_dat-1),
coded_age_one=OM$coded_age_young,
coded_age_two=OM$coded_age_old,
coded_one_min=sapply(OM$coded_age_young, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_one_max=sapply(OM$coded_age_young, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_min=sapply(OM$coded_age_old, FUN=function(x){min(which(OM$AE_mat[,x+1]>0.01)-1)}),
coded_two_max=sapply(OM$coded_age_old, FUN=function(x){max(which(OM$AE_mat[,x+1]>0.01)-1)}),
#Switch for whether to use a data source or not, 0=no, 1=yes
Lamda_Harvest=1,
Lamda_Comp=1,
Lamda_Index=1,
Lamda_CKMR=1,
AE_mat=OM$AE_mat,
pi_nu=OM$pi_nu)
#Parameters
set.seed(s)
par <- list(log_M=log(runif(1,min=OM$OM$Mref-OM$OM$Mref*0.5,max=OM$OM$Mref+OM$OM$Mref*0.5)),
#              log_q=log(runif(1,min=OM$q_index-OM$q_index*0.5,max=OM$q_index+OM$q_index*0.5)),
log_q=log(OM$q_index),
log_recruit_devs_init=rep(0,dat$lage),
log_recruit_devs=rep(0,dat$lyear),
steepness=OM$OM$h,
log_R0=log(runif(1,min=OM$OM$R0-OM$OM$R0*0.5,max=OM$OM$R0+OM$OM$R0*0.5)),
log_sigma_rec=log(OM$OM$sd_rec),
log_sd_catch=log(OM$sd_catch),
#              log_sd_catch=log(0.001),
log_sd_index=log(OM$sd_index),
Sel_logis_k=log(runif(1,min=OM$OM$Sel_slope-OM$OM$Sel_slope*0.5,max=OM$OM$Sel_slope+OM$OM$Sel_slope*0.5)),
Sel_logis_midpt=log(runif(1,min=OM$OM$Sel_50-OM$OM$Sel_50*0.5,max=OM$OM$Sel_50+OM$OM$Sel_50*0.5)),
log_fint=log(runif(length(OM$OM$F_int[26:100]),min=OM$OM$F_int[26:100]-OM$OM$F_int[26:100]*0.5,max=OM$OM$F_int[26:100]+OM$OM$F_int[26:100]*0.5)))
dyn.load(dynlib("CKMRmultinom_POP_HSP_GPP_Fisch_wAE"))
parm_names<-rep(names(par),lapply(par,length))
fixed<-list(steepness=factor(NA),log_sigma_rec=factor(NA),log_q=factor(NA),
log_sd_catch=factor(NA),
log_sd_index=factor(NA))
lower_bounds<-c(-5,-20,rep(-10,dat$lage),rep(-10,dat$lyear), 0, 5, -5,-5,-5,-5,-5,rep(-10,dat$lyear))
upper_bounds<-c( 2,  1,rep( 10,dat$lage),rep( 10,dat$lyear), 1, 25, 2, 2, 2, 5, 5,rep(  0,dat$lyear))
reffects=c("log_recruit_devs")
l<-lower_bounds[-which(parm_names %in% c(names(fixed)))]
u<-upper_bounds[-which(parm_names %in% c(names(fixed)))]
SCAA <- MakeADFun(dat, par, DLL="CKMRmultinom_POP_HSP_GPP_Fisch_wAE", map=fixed)
counter<-1
tryCatch({
SCAA_fit <- TMBhelper::fit_tmb(obj=SCAA, startpar=SCAA$par, lower=l, upper=u, newtonsteps = 1,getsd=TRUE)
}, error=function(e){
counter<<-0
SCAA_fit<<-list(NA)
})
return(SCAA_fit)
}
load(paste0(wd,"/Sardine_wdat_N5000_Ind25_ckmrmultinom5_1.RData"))
res_list_Cod<-res_list_Flatfish<-res_list_Sardine<-list()
res_list_Sardine  <- foreach (s=1:N_sim, .packages=c("TMB")) %dopar%{
run(s=s, OM=Sardine_wdat[[s]])
}
saveRDS(res_list_Sardine, file=paste0("C:/Users/fischn/Documents/transferfiles/SCAAfit_Sardine_N5000_Ind25_ckmrmultinom5_noiflike_analyticalq.RData"))
compile("CKMRmultinom_POP_HSP_GPP_Fisch_wAE.cpp")
stopCluster(cl)
