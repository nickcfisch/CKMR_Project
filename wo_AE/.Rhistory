for(i in 1:length(fyear_ckmr:lyear_ckmr)){
if (prop_ckmr==1){
age_samples[i,] <- rep(ages,times=Obs_Catch_Comp[fyear_ckmr-fyear_dat+i,])
}else if (prop_ckmr!=1){
age_samples[i,] <- sample(ages, size = n_ckmr, replace = FALSE, prob = Obs_Catch_Comp[fyear_ckmr-fyear_dat+i,])
}
}
samples <- data.frame(samp_year = rep(fyear_ckmr:lyear_ckmr, each=n_ckmr), age = c(t(age_samples)))
samples <- cbind.data.frame(samples, born_year = samples$samp_year - samples$age)    #From the age and sampling year, calculate the year it was born in.
#The total reproductive output at the time it was born
Tot_reprod <- rep(NA, length(samples$born_year))
Tot_reprod[which(samples$born_year>0)] <- OM$SSB[samples$born_year[which(samples$born_year>0)]]
Tot_reprod[which(samples$born_year<1)] <- OM$SSB0
samples <- cbind.data.frame(samples, Tot_reprod = Tot_reprod)                         #The total reproductive output at the time it was born
samples<-aggregate(rep(1,nrow(samples)),by=list(samp_year=samples$samp_year,age=samples$age,born_year=samples$born_year,Tot_reprod=samples$Tot_reprod), FUN=sum)
colnames(samples)<-c("samp_year","age","born_year","Tot_reprod","reps")
samples<-samples[order(samples$samp_year,samples$age,samples$born_year,samples$Tot_reprod),]
pairs<-do.call(cbind.data.frame,Map(expand.grid,samples,samples))
colnames(pairs)<-c("samp_year.old","samp_year.young","age.old","age.young","born_year.old","born_year.young","Tot_reprod.old","Tot_reprod.young","reps.old","reps.young") #naming the columns
pairs <- pairs[c(pairs$born_year.old < pairs$born_year.young),] #Older sibling has to be older than younger, as does parent
pairs <- pairs[,c("samp_year.young","age.young","born_year.young","Tot_reprod.young","reps.young","samp_year.old","age.old","born_year.old","Tot_reprod.old","reps.old")] #just reordering the columns
pairs <- cbind.data.frame(pairs, age_diff = pairs$born_year.young-pairs$born_year.old, times=pairs$reps.young*pairs$reps.old)
#Rewrote using multinomial (and binomial. rather than bernoulli), because you can't have too many samples it gets too complex.
collapsed_pairs<-aggregate.data.frame(x=pairs$times, by=list(pairs$born_year.young,pairs$age_diff,pairs$samp_year.old), FUN=sum)
colnames(collapsed_pairs)<-c("born_year.young", "age_diff","samp_year.old","times")
#Now for loop through the samples
HSP_calcs<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
for (i in 1:nrow(collapsed_pairs)){
#Ok so now it is the number (fecundity) that could have given birth to the first born / total reproductive output  * survival to second born * (fecundity of age at second born / total reproductive output at time of second born)
for(j in 2:(OM$lage+1)){ #parent cannot have been age 0
#      if ((j+collapsed_pairs$age_diff[i])<=(OM$lage+1)){ #If we are not in the plus group
if ((j+collapsed_pairs$age_diff[i])<=(OM$lage)){ #If we are not in the plus group
if(collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]>0){ # if we're not in unfished years
HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB[collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]] ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
} else if (collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]<1){ #if we are in unfished years
if(collapsed_pairs$born_year.young[i]>0){ #if second born is not in unfished years
HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
} else if (collapsed_pairs$born_year.young[i]<1){ #if second born is in unfished years
HSP_calcs[i,j] <-  ( (OM$N0aa[j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB0)  #4 is for MHSP + FHSP
}}
}# else if (j+collapsed_pairs$age_diff[i]>(OM$lage+1)){ #Now if we are in plus group
#        if(collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]>0){ #if we're not in unfished years
#          HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB[collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]] ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
#        } else if (collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]<1){ #if we are in unfished years
#          if(collapsed_pairs$born_year.young[i]>0){ #if second born is not in unfished years
#            HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
#          } else if (collapsed_pairs$born_year[i]<1){ #if second born is in unfished years
#            HSP_calcs[i,j] <-  ( (OM$N0aa[(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB0)  #4 is for MHSP + FHSP
#          }}
#      }
}
}
#Then we sum over all the ages to get the HSP probability for that given data pair
collapsed_pairs$HSP_prob <- rowSums(HSP_calcs)
####################
#Now POP calcs
####################
#Now for loop through the samples
collapsed_pairs$prob_POP<-0
for (i in 1:nrow(collapsed_pairs)){
#Ok so the fecundity based on the age of the potential parent / (0.5 * the total reproductive output of the population at the time of juves birth )
if(collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_POP[i]<- 2*(OM$Mat[collapsed_pairs$age_diff[i]+1]*OM$Waa[collapsed_pairs$age_diff[i]+1] / sum( OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa ))
} else if(collapsed_pairs$born_year.young[i]<1){
collapsed_pairs$prob_POP[i]<- 2*(OM$Mat[collapsed_pairs$age_diff[i]+1]*OM$Waa[collapsed_pairs$age_diff[i]+1] / sum( OM$N0aa*OM$Mat*OM$Waa ))
}
}#Don't need to consider plus group calcs bc max age diff will be 25
# A potential parent has to have been sampled after or on the year of youngs birth, because sampling is lethal
collapsed_pairs$prob_POP<-ifelse(collapsed_pairs$samp_year.old >= collapsed_pairs$born_year.young,collapsed_pairs$prob_POP,0)
####################################
#Now GGP Probabilities
####################################
#Now for loop through the samples
surv_prob_ggp<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
collapsed_pairs$prob_GGP<-0
for (i in 1:nrow(collapsed_pairs)){
#Your true age difference has to be > 0
if(collapsed_pairs$age_diff[i]>0){
for (k in 1:OM$lage){  #Looping through potential ages of potential parent, parent cannot have been age 0
#some accounting to make the code more readable below
#age of the grandparent in the year of unseen parents birth
a_gp_bp <- collapsed_pairs$born_year.young[i] - k - collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]
#year of unseen parents birth
y_bp <- collapsed_pairs$born_year.young[i] - k
#number of years parent has to survive from 0 to birth of juvenile is simply k
#Probability unseen parent lives to the year of juveniles birth
surv_prob_ggp<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
if(y_bp > 0){
surv_prob_ggp[i,1]<-exp(-(OM$Maa[1]+OM$Faa[collapsed_pairs$born_year.young[i]-k,1]))
} else if ( y_bp < 1){ #to account for unfished years
surv_prob_ggp[i,1]<-exp(-OM$Maa[1])
}
#Probability you survived from age zero to the year of the juveniles birth
if(k > 1){
for (y in 1:(k-1)){        #Loop through the years the parent has to survive
if(y < OM$lage){ #if we are not in plus group
if(collapsed_pairs$born_year.young[i]-k+y > 0){
surv_prob_ggp[i,y+1]<- surv_prob_ggp[i,y] * exp(-(OM$Maa[y+1]+OM$Faa[collapsed_pairs$born_year.young[i]-k+y,y+1]))
} else if (collapsed_pairs$born_year.young[i]-k+y < 1){ #to account for unfished years
surv_prob_ggp[i,y+1]<- surv_prob_ggp[i,y] * exp(-OM$Maa[y+1])
}}
}
}
#Now GGP calcs
#sample year of older must be greater than birth year of the parent
if(collapsed_pairs$samp_year.old[i] > (collapsed_pairs$born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive and if we're not in plu group
if(a_gp_bp > 0 & a_gp_bp < (OM$lage+1)){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[y_bp, 1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[,1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(a_gp_bp > OM$lage){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[y_bp,1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
#######Instead if the sample year of older is equal to the birth year of the potential parent, multiply by 0.5
if(collapsed_pairs$samp_year.old[i]==(collapsed_pairs$born_year.young[i]-k)){
#sample year of older must be greater than birth year of the parent
if(collapsed_pairs$samp_year.old[i] > (collapsed_pairs$born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive and if we're not in plu group
if(a_gp_bp > 0 & a_gp_bp < (OM$lage+1)){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[y_bp,1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(a_gp_bp > OM$lage){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[y_bp,1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
}
}
}
}
#Multiplying by two for the probability of MGGP or PGGP
collapsed_pairs$prob_GGP<-2*collapsed_pairs$prob_GGP
collapsed_pairs$n_UP<-collapsed_pairs$n_HSPorGGP<-collapsed_pairs$n_POP<-NA
for (m in 1:nrow(collapsed_pairs)){
collapsed_pairs[m,c("n_UP","n_HSPorGGP","n_POP")]<-t(rmultinom(1, size=collapsed_pairs$times[m], prob=c(1-((collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu+collapsed_pairs$prob_POP[m]),(collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu,collapsed_pairs$prob_POP[m])))
}
collapsed_pairs<-collapsed_pairs[order(collapsed_pairs$born_year.young,collapsed_pairs$age_diff),] #ordering the counts by year born and then the age difference
sim_vals <- list(samples = samples, pairs=pairs, pair_counts = collapsed_pairs, pair_data = collapsed_pairs[,c("born_year.young", "age_diff", "samp_year.old", "n_UP", "n_HSPorGGP","n_POP","times")])
return(list(OM=OM,dat_seed=dat_seed,sd_catch=sd_catch,N_Comp_preCKMR=N_Comp_preCKMR,N_Comp_CKMR=N_Comp_CKMR,q_index=q_index,sd_index=sd_index,fyear_dat=fyear_dat,lyear_dat=lyear_dat,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AE_mat,
lxf_ggp=lxf_ggp,
surv_prob_ggp=surv_prob_ggp,
pair_counts=sim_vals$pair_counts,
Obs_Catch=Obs_Catch,
Obs_Catch_Comp=Obs_Catch_Comp,
Obs_Index=Obs_Index,
#CKMR HSP data
born_year_old=sim_vals$pair_data$born_year.young-sim_vals$pair_data$age_diff,
age_diff=sim_vals$pair_data$age_diff,
n_ckmr=sim_vals$pair_data$times,
k_ckmr_hsporggp=sim_vals$pair_data$n_HSPorGGP,
#CKMR POP
born_year_young=sim_vals$pair_data$born_year.young,
k_ckmr_pop=sim_vals$pair_data$n_POP,
samp_year_old=sim_vals$pair_data$samp_year.old))
}
head(Sardine_wdat2[[1]]$surv_prob_ggp)
Cod_wdat2<-Flatfish_wdat2<-Sardine_wdat2<-list()
for (s in 1:1){
Cod_wdat2[[s]]     <-Get_Data2(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])
Flatfish_wdat2[[s]]<-Get_Data2(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])
Sardine_wdat2[[s]] <-Get_Data2(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])
}
Get_Data2<-function(OM=NA,              #Operating model from which to model
dat_seed=1,
fyear_dat=26,
lyear_dat=100,
sd_catch=0.05,
N_Comp_preCKMR=c(30,rep(0,9),40,rep(0,9),50,rep(0,4),60,rep(0,4),70,rep(0,4),80,rep(0,4),90,rep(0,4),rep(100,30)),
N_Comp_CKMR=200,
q_index=0.0001,
sd_index=0.25,
prop_ckmr=1,
fyear_ckmr=76,
lyear_ckmr=100,
pi_nu=0.736,          #False negative retention probability
AE_mat="identity")    #Given your true age i (row), this matrix defines the probability that you will be classified age j (column), #REMEMBER THIS NEEDS TO BE IN THE NUMBER OF AGES IN YOUR MODEL
{
set.seed(dat_seed)
if(AE_mat[1]=="identity"){
AE_mat<-diag(length(OM$fage:OM$lage))
}
#Getting Data
Obs_Catch<-Obs_Index<-NA
Obs_Catch_Comp<-Obs_Catch_Comp_noAE<-matrix(NA,nrow=length(fyear_dat:lyear_dat),ncol=length(OM$fage:OM$lage))
Obs_Catch_Comp_wiY<-array(0,dim=c(length(fyear_dat:lyear_dat),length(OM$fage:OM$lage),length(OM$fage:OM$lage)))
N_Comp<-c(rep(0,fyear_dat-1),N_Comp_preCKMR[1:length(fyear_dat:(fyear_ckmr-1))],rep(N_Comp_CKMR,length(fyear_ckmr:lyear_ckmr)))
for (d in fyear_dat:lyear_dat){
Obs_Catch[d-(fyear_dat-1)]<-rlnorm(1, meanlog=log(sum(OM$Caa[d,]*OM$Waa)), sdlog=sd_catch)
Obs_Catch_Comp_noAE[d-(fyear_dat-1),]<-rmultinom(n=1,size=N_Comp[d], prob=OM$Caa[d,])
Obs_Index[d-(fyear_dat-1)]<-rlnorm(1, meanlog=log(sum(OM$Naa[d,]*((1-exp(-OM$Zaa[d,]))/OM$Zaa[d,])*OM$Sel*OM$Waa)*q_index), sdlog=sd_index)
#Getting observed data with Ageing error
#Another sampler is needed to get data in integers
for (a in 1:length(OM$fage:OM$lage)){
if(Obs_Catch_Comp_noAE[d-(fyear_dat-1),a]>0){
Obs_Catch_Comp_wiY[d-(fyear_dat-1),a,]<-rmultinom(1,size=Obs_Catch_Comp_noAE[d-(fyear_dat-1),a],prob=AE_mat[a,])
}
}
#if you're before CKMR
if(d<fyear_ckmr){
Obs_Catch_Comp[d-(fyear_dat-1),]<-colSums(Obs_Catch_Comp_wiY[d-(fyear_dat-1),,])
}
#if you're after CKMR (no AE)
if(d>=fyear_ckmr){
Obs_Catch_Comp[d-(fyear_dat-1),]<-Obs_Catch_Comp_noAE[d-(fyear_dat-1),]
}
}
##################################
#Simulator for both HSP and POP
##################################
library(microbenchmark)
library(TMB)
library(tmbstan)
library(purrr)
#Simulating the data
ages <- OM$fage:OM$lage          #a vector of the ages at which individuals are sampled
n_ckmr<-round(N_Comp_CKMR*prop_ckmr)
# The age composition samples
age_samples<-matrix(NA, nrow=length(fyear_ckmr:lyear_ckmr),ncol=n_ckmr)
for(i in 1:length(fyear_ckmr:lyear_ckmr)){
if (prop_ckmr==1){
age_samples[i,] <- rep(ages,times=Obs_Catch_Comp[fyear_ckmr-fyear_dat+i,])
}else if (prop_ckmr!=1){
age_samples[i,] <- sample(ages, size = n_ckmr, replace = FALSE, prob = Obs_Catch_Comp[fyear_ckmr-fyear_dat+i,])
}
}
samples <- data.frame(samp_year = rep(fyear_ckmr:lyear_ckmr, each=n_ckmr), age = c(t(age_samples)))
samples <- cbind.data.frame(samples, born_year = samples$samp_year - samples$age)    #From the age and sampling year, calculate the year it was born in.
#The total reproductive output at the time it was born
Tot_reprod <- rep(NA, length(samples$born_year))
Tot_reprod[which(samples$born_year>0)] <- OM$SSB[samples$born_year[which(samples$born_year>0)]]
Tot_reprod[which(samples$born_year<1)] <- OM$SSB0
samples <- cbind.data.frame(samples, Tot_reprod = Tot_reprod)                         #The total reproductive output at the time it was born
samples<-aggregate(rep(1,nrow(samples)),by=list(samp_year=samples$samp_year,age=samples$age,born_year=samples$born_year,Tot_reprod=samples$Tot_reprod), FUN=sum)
colnames(samples)<-c("samp_year","age","born_year","Tot_reprod","reps")
samples<-samples[order(samples$samp_year,samples$age,samples$born_year,samples$Tot_reprod),]
pairs<-do.call(cbind.data.frame,Map(expand.grid,samples,samples))
colnames(pairs)<-c("samp_year.old","samp_year.young","age.old","age.young","born_year.old","born_year.young","Tot_reprod.old","Tot_reprod.young","reps.old","reps.young") #naming the columns
pairs <- pairs[c(pairs$born_year.old < pairs$born_year.young),] #Older sibling has to be older than younger, as does parent
pairs <- pairs[,c("samp_year.young","age.young","born_year.young","Tot_reprod.young","reps.young","samp_year.old","age.old","born_year.old","Tot_reprod.old","reps.old")] #just reordering the columns
pairs <- cbind.data.frame(pairs, age_diff = pairs$born_year.young-pairs$born_year.old, times=pairs$reps.young*pairs$reps.old)
#Rewrote using multinomial (and binomial. rather than bernoulli), because you can't have too many samples it gets too complex.
collapsed_pairs<-aggregate.data.frame(x=pairs$times, by=list(pairs$born_year.young,pairs$age_diff,pairs$samp_year.old), FUN=sum)
colnames(collapsed_pairs)<-c("born_year.young", "age_diff","samp_year.old","times")
#Now for loop through the samples
HSP_calcs<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
for (i in 1:nrow(collapsed_pairs)){
#Ok so now it is the number (fecundity) that could have given birth to the first born / total reproductive output  * survival to second born * (fecundity of age at second born / total reproductive output at time of second born)
for(j in 2:(OM$lage+1)){ #parent cannot have been age 0
#      if ((j+collapsed_pairs$age_diff[i])<=(OM$lage+1)){ #If we are not in the plus group
if ((j+collapsed_pairs$age_diff[i])<=(OM$lage)){ #If we are not in the plus group
if(collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]>0){ # if we're not in unfished years
HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB[collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]] ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
} else if (collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]<1){ #if we are in unfished years
if(collapsed_pairs$born_year.young[i]>0){ #if second born is not in unfished years
HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
} else if (collapsed_pairs$born_year.young[i]<1){ #if second born is in unfished years
HSP_calcs[i,j] <-  ( (OM$N0aa[j+collapsed_pairs$age_diff[i]]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[j+collapsed_pairs$age_diff[i]]*OM$Waa[j+collapsed_pairs$age_diff[i]] / OM$SSB0)  #4 is for MHSP + FHSP
}}
}# else if (j+collapsed_pairs$age_diff[i]>(OM$lage+1)){ #Now if we are in plus group
#        if(collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]>0){ #if we're not in unfished years
#          HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB[collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]] ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
#        } else if (collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]<1){ #if we are in unfished years
#          if(collapsed_pairs$born_year.young[i]>0){ #if second born is not in unfished years
#            HSP_calcs[i,j] <-  ( (OM$Naa[collapsed_pairs$born_year.young[i],(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB[collapsed_pairs$born_year.young[i]])  #4 is for MHSP + FHSP
#          } else if (collapsed_pairs$born_year[i]<1){ #if second born is in unfished years
#            HSP_calcs[i,j] <-  ( (OM$N0aa[(OM$lage+1)]*OM$Mat[j]*OM$Waa[j]) / OM$SSB0 ) * (4 * OM$Mat[(OM$lage+1)]*OM$Waa[(OM$lage+1)] / OM$SSB0)  #4 is for MHSP + FHSP
#          }}
#      }
}
}
#Then we sum over all the ages to get the HSP probability for that given data pair
collapsed_pairs$HSP_prob <- rowSums(HSP_calcs)
####################
#Now POP calcs
####################
#Now for loop through the samples
collapsed_pairs$prob_POP<-0
for (i in 1:nrow(collapsed_pairs)){
#Ok so the fecundity based on the age of the potential parent / (0.5 * the total reproductive output of the population at the time of juves birth )
if(collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_POP[i]<- 2*(OM$Mat[collapsed_pairs$age_diff[i]+1]*OM$Waa[collapsed_pairs$age_diff[i]+1] / sum( OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa ))
} else if(collapsed_pairs$born_year.young[i]<1){
collapsed_pairs$prob_POP[i]<- 2*(OM$Mat[collapsed_pairs$age_diff[i]+1]*OM$Waa[collapsed_pairs$age_diff[i]+1] / sum( OM$N0aa*OM$Mat*OM$Waa ))
}
}#Don't need to consider plus group calcs bc max age diff will be 25
# A potential parent has to have been sampled after or on the year of youngs birth, because sampling is lethal
collapsed_pairs$prob_POP<-ifelse(collapsed_pairs$samp_year.old >= collapsed_pairs$born_year.young,collapsed_pairs$prob_POP,0)
####################################
#Now GGP Probabilities
####################################
#Now for loop through the samples
surv_prob_ggp<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
collapsed_pairs$prob_GGP<-0
for (i in 1:nrow(collapsed_pairs)){
#Your true age difference has to be > 0
if(collapsed_pairs$age_diff[i]>0){
for (k in 1:OM$lage){  #Looping through potential ages of potential parent, parent cannot have been age 0
#some accounting to make the code more readable below
#age of the grandparent in the year of unseen parents birth
a_gp_bp <- collapsed_pairs$born_year.young[i] - k - collapsed_pairs$born_year.young[i]-collapsed_pairs$age_diff[i]
#year of unseen parents birth
y_bp <- collapsed_pairs$born_year.young[i] - k
#number of years parent has to survive from 0 to birth of juvenile is simply k
#Probability unseen parent lives to the year of juveniles birth
surv_prob_ggp<-matrix(0, nrow=nrow(collapsed_pairs), ncol=(OM$lage+1))
if(y_bp > 0){
surv_prob_ggp[i,1]<-exp(-(OM$Maa[1]+OM$Faa[collapsed_pairs$born_year.young[i]-k,1]))
} else if ( y_bp < 1){ #to account for unfished years
surv_prob_ggp[i,1]<-exp(-OM$Maa[1])
}
#Probability you survived from age zero to the year of the juveniles birth
if(k > 1){
for (y in 1:(k-1)){        #Loop through the years the parent has to survive
if(y < OM$lage){ #if we are not in plus group
if(collapsed_pairs$born_year.young[i]-k+y > 0){
surv_prob_ggp[i,y+1]<- surv_prob_ggp[i,y] * exp(-(OM$Maa[y+1]+OM$Faa[collapsed_pairs$born_year.young[i]-k+y,y+1]))
} else if (collapsed_pairs$born_year.young[i]-k+y < 1){ #to account for unfished years
surv_prob_ggp[i,y+1]<- surv_prob_ggp[i,y] * exp(-OM$Maa[y+1])
}}
}
}
#Now GGP calcs
#sample year of older must be greater than birth year of the parent
if(collapsed_pairs$samp_year.old[i] > (collapsed_pairs$born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive and if we're not in plu group
if(a_gp_bp > 0 & a_gp_bp < (OM$lage+1)){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[y_bp, 1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[,1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(a_gp_bp > OM$lage){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$Naa[y_bp,1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] +
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
#######Instead if the sample year of older is equal to the birth year of the potential parent, multiply by 0.5
if(collapsed_pairs$samp_year.old[i]==(collapsed_pairs$born_year.young[i]-k)){
#sample year of older must be greater than birth year of the parent
if(collapsed_pairs$samp_year.old[i] > (collapsed_pairs$born_year.young[i]-k)){
#age of grandparent at year of parents birth must be positive and if we're not in plu group
if(a_gp_bp > 0 & a_gp_bp < (OM$lage+1)){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
#P(GGP)=2 * sum over parent ages (Naa[birth year of younger,age of potential parent] * Fec[age of potential parent at time of youngers birth]/SSB[birth year of younger] * Fec[age of grandparent at time of parents birth]/(0.5*SSB[year of potential parents birth]) )
#So the birth year of the potential parent of the younger is the birth year of younger - age of parent at time of youngers birth
#The age of the grandparent at the time of the parents birth is the birth year of the parent - the birth year of the grandparent
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[y_bp,1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,k+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[a_gp_bp+1]*OM$Waa[a_gp_bp+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
#Now if we are in plus group territory. Same calcs just plus group
} else if(a_gp_bp > OM$lage){
if(y_bp>0 & collapsed_pairs$born_year.young[i]>0){  #if not in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$Naa[y_bp,1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$Naa[y_bp,]*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]>0){  #if year of parents birth is in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$Naa[collapsed_pairs$born_year.young[i],]*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
} else if(y_bp<1 & collapsed_pairs$born_year.young[i]<1){  #if both in unfished territory
collapsed_pairs$prob_GGP[i]<- collapsed_pairs$prob_GGP[i] + 0.5 *
OM$N0aa[1] * surv_prob_ggp[i,OM$lage+1] *
((OM$Mat[k+1]*OM$Waa[k+1])/sum(OM$N0aa*OM$Mat*OM$Waa)) *
((OM$Mat[OM$lage+1]*OM$Waa[OM$lage+1])/(0.5*sum(OM$N0aa*OM$Mat*OM$Waa)))
}
}
}
}
}
}
}
#Multiplying by two for the probability of MGGP or PGGP
collapsed_pairs$prob_GGP<-2*collapsed_pairs$prob_GGP
collapsed_pairs$n_UP<-collapsed_pairs$n_HSPorGGP<-collapsed_pairs$n_POP<-NA
for (m in 1:nrow(collapsed_pairs)){
collapsed_pairs[m,c("n_UP","n_HSPorGGP","n_POP")]<-t(rmultinom(1, size=collapsed_pairs$times[m], prob=c(1-((collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu+collapsed_pairs$prob_POP[m]),(collapsed_pairs$HSP_prob[m]+collapsed_pairs$prob_GGP[m])*pi_nu,collapsed_pairs$prob_POP[m])))
}
collapsed_pairs<-collapsed_pairs[order(collapsed_pairs$born_year.young,collapsed_pairs$age_diff),] #ordering the counts by year born and then the age difference
sim_vals <- list(samples = samples, pairs=pairs, pair_counts = collapsed_pairs, pair_data = collapsed_pairs[,c("born_year.young", "age_diff", "samp_year.old", "n_UP", "n_HSPorGGP","n_POP","times")])
return(list(OM=OM,dat_seed=dat_seed,sd_catch=sd_catch,N_Comp_preCKMR=N_Comp_preCKMR,N_Comp_CKMR=N_Comp_CKMR,q_index=q_index,sd_index=sd_index,fyear_dat=fyear_dat,lyear_dat=lyear_dat,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AE_mat,
surv_prob_ggp=surv_prob_ggp,
pair_counts=sim_vals$pair_counts,
Obs_Catch=Obs_Catch,
Obs_Catch_Comp=Obs_Catch_Comp,
Obs_Index=Obs_Index,
#CKMR HSP data
born_year_old=sim_vals$pair_data$born_year.young-sim_vals$pair_data$age_diff,
age_diff=sim_vals$pair_data$age_diff,
n_ckmr=sim_vals$pair_data$times,
k_ckmr_hsporggp=sim_vals$pair_data$n_HSPorGGP,
#CKMR POP
born_year_young=sim_vals$pair_data$born_year.young,
k_ckmr_pop=sim_vals$pair_data$n_POP,
samp_year_old=sim_vals$pair_data$samp_year.old))
}
Cod_wdat2<-Flatfish_wdat2<-Sardine_wdat2<-list()
for (s in 1:1){
Cod_wdat2[[s]]     <-Get_Data2(OM=Cod_runs[[s]],     dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[1]])
Flatfish_wdat2[[s]]<-Get_Data2(OM=Flatfish_runs[[s]],dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[2]])
Sardine_wdat2[[s]] <-Get_Data2(OM=Sardine_runs[[s]], dat_seed=s,fyear_dat=fyear_dat,lyear_dat=lyear_dat,sd_catch=sd_catch,N_Comp_preCKMR=N_comp_preCKMR,N_Comp_CKMR=N_comp_CKMR,q_index=0.0001,prop_ckmr=prop_ckmr,fyear_ckmr=fyear_ckmr,lyear_ckmr=lyear_ckmr,pi_nu=pi_nu,AE_mat=AEs[[3]])
}
head(Sardine_wdat2[[1]]$surv_prob_ggp)
head(Sardine_wdat2[[1]]$pair_counts)
